// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: pb_center.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 游戏的每一局的结束的结算结果
type GameSettlementTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType uint32 `protobuf:"varint,1,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	// 玩家赢钱的数目  正数为赢钱 负数为输钱
	Score int64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *GameSettlementTos) Reset() {
	*x = GameSettlementTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSettlementTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSettlementTos) ProtoMessage() {}

func (x *GameSettlementTos) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSettlementTos.ProtoReflect.Descriptor instead.
func (*GameSettlementTos) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{0}
}

func (x *GameSettlementTos) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *GameSettlementTos) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

//probability 概率  reward jiang
type ProbabilityRewardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 库存1 抽水的概率 probability
	Probability uint32 `protobuf:"varint,1,opt,name=probability,proto3" json:"probability,omitempty"`
	// 库存2 奖励的概率
	Reward float32 `protobuf:"fixed32,2,opt,name=reward,proto3" json:"reward,omitempty"`
	// 系统服务费
	SystemFee float32 `protobuf:"fixed32,3,opt,name=system_fee,json=systemFee,proto3" json:"system_fee,omitempty"`
}

func (x *ProbabilityRewardToc) Reset() {
	*x = ProbabilityRewardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbabilityRewardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbabilityRewardToc) ProtoMessage() {}

func (x *ProbabilityRewardToc) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbabilityRewardToc.ProtoReflect.Descriptor instead.
func (*ProbabilityRewardToc) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{1}
}

func (x *ProbabilityRewardToc) GetProbability() uint32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *ProbabilityRewardToc) GetReward() float32 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *ProbabilityRewardToc) GetSystemFee() float32 {
	if x != nil {
		return x.SystemFee
	}
	return 0
}

//玩家id
type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{2}
}

func (x *UserRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

//玩家id
type UsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid []string `protobuf:"bytes,1,rep,name=uid,proto3" json:"uid,omitempty"`
}

func (x *UsersRequest) Reset() {
	*x = UsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersRequest) ProtoMessage() {}

func (x *UsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersRequest.ProtoReflect.Descriptor instead.
func (*UsersRequest) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{3}
}

func (x *UsersRequest) GetUid() []string {
	if x != nil {
		return x.Uid
	}
	return nil
}

//玩家预扣金币
type SupposeReduceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gold int64  `protobuf:"varint,2,opt,name=gold,proto3" json:"gold,omitempty"`
}

func (x *SupposeReduceReq) Reset() {
	*x = SupposeReduceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupposeReduceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupposeReduceReq) ProtoMessage() {}

func (x *SupposeReduceReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupposeReduceReq.ProtoReflect.Descriptor instead.
func (*SupposeReduceReq) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{4}
}

func (x *SupposeReduceReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SupposeReduceReq) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

//玩家增加或者减少金币
type ChangeBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                            //玩家s_id
	Gold        int64   `protobuf:"varint,2,opt,name=gold,proto3" json:"gold,omitempty"`                                         //改变的钱
	ChangeType  uint32  `protobuf:"varint,3,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`           //流水改变类型
	PerRoundSid *string `protobuf:"bytes,4,opt,name=per_round_sid,json=perRoundSid,proto3,oneof" json:"per_round_sid,omitempty"` //游戏牌局号(游戏必填，其他不填)
	GameId      *uint32 `protobuf:"varint,5,opt,name=game_id,json=gameId,proto3,oneof" json:"game_id,omitempty"`                 //游戏id(游戏必填，其他不填)
	RoomId      *uint32 `protobuf:"varint,6,opt,name=room_id,json=roomId,proto3,oneof" json:"room_id,omitempty"`                 //游戏房间号(游戏必填，其他不填)
	SerialNo    *string `protobuf:"bytes,7,opt,name=serial_no,json=serialNo,proto3,oneof" json:"serial_no,omitempty"`            //序列号(可不填,用于以后订单号)
}

func (x *ChangeBalanceReq) Reset() {
	*x = ChangeBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBalanceReq) ProtoMessage() {}

func (x *ChangeBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBalanceReq.ProtoReflect.Descriptor instead.
func (*ChangeBalanceReq) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeBalanceReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChangeBalanceReq) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *ChangeBalanceReq) GetChangeType() uint32 {
	if x != nil {
		return x.ChangeType
	}
	return 0
}

func (x *ChangeBalanceReq) GetPerRoundSid() string {
	if x != nil && x.PerRoundSid != nil {
		return *x.PerRoundSid
	}
	return ""
}

func (x *ChangeBalanceReq) GetGameId() uint32 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *ChangeBalanceReq) GetRoomId() uint32 {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return 0
}

func (x *ChangeBalanceReq) GetSerialNo() string {
	if x != nil && x.SerialNo != nil {
		return *x.SerialNo
	}
	return ""
}

//玩家增加或者减少金币返回
type ChangeBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` //0-成功,其他-失败
	Msg        string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    //返回描述
	BeforeGold *int64 `protobuf:"varint,3,opt,name=before_gold,json=beforeGold,proto3,oneof" json:"before_gold,omitempty"`
	AfterGold  *int64 `protobuf:"varint,4,opt,name=after_gold,json=afterGold,proto3,oneof" json:"after_gold,omitempty"`
}

func (x *ChangeBalanceResp) Reset() {
	*x = ChangeBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBalanceResp) ProtoMessage() {}

func (x *ChangeBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBalanceResp.ProtoReflect.Descriptor instead.
func (*ChangeBalanceResp) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeBalanceResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ChangeBalanceResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChangeBalanceResp) GetBeforeGold() int64 {
	if x != nil && x.BeforeGold != nil {
		return *x.BeforeGold
	}
	return 0
}

func (x *ChangeBalanceResp) GetAfterGold() int64 {
	if x != nil && x.AfterGold != nil {
		return *x.AfterGold
	}
	return 0
}

// 用户信息
type MUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SId          string  `protobuf:"bytes,1,opt,name=s_id,json=sId,proto3" json:"s_id,omitempty"`
	Id           *int32  `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Account      *string `protobuf:"bytes,3,opt,name=account,proto3,oneof" json:"account,omitempty"`
	Name         *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Token        *string `protobuf:"bytes,5,opt,name=token,proto3,oneof" json:"token,omitempty"`
	Platform     *string `protobuf:"bytes,6,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	Sex          *int32  `protobuf:"varint,7,opt,name=sex,proto3,oneof" json:"sex,omitempty"`
	Mac          *string `protobuf:"bytes,8,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	Nickname     *string `protobuf:"bytes,9,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Ccode        *string `protobuf:"bytes,10,opt,name=ccode,proto3,oneof" json:"ccode,omitempty"`
	Phone        *string `protobuf:"bytes,11,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	RegisterTime *int64  `protobuf:"varint,12,opt,name=register_time,json=registerTime,proto3,oneof" json:"register_time,omitempty"`
	Password     *string `protobuf:"bytes,13,opt,name=password,proto3,oneof" json:"password,omitempty"`
	Agent        *string `protobuf:"bytes,14,opt,name=agent,proto3,oneof" json:"agent,omitempty"`
	Status       *int32  `protobuf:"varint,15,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RegisterIp   *string `protobuf:"bytes,16,opt,name=register_ip,json=registerIp,proto3,oneof" json:"register_ip,omitempty"`
	FatherId     *string `protobuf:"bytes,17,opt,name=father_id,json=fatherId,proto3,oneof" json:"father_id,omitempty"`
}

func (x *MUser) Reset() {
	*x = MUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MUser) ProtoMessage() {}

func (x *MUser) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MUser.ProtoReflect.Descriptor instead.
func (*MUser) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{7}
}

func (x *MUser) GetSId() string {
	if x != nil {
		return x.SId
	}
	return ""
}

func (x *MUser) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MUser) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *MUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MUser) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *MUser) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *MUser) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *MUser) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *MUser) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *MUser) GetCcode() string {
	if x != nil && x.Ccode != nil {
		return *x.Ccode
	}
	return ""
}

func (x *MUser) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *MUser) GetRegisterTime() int64 {
	if x != nil && x.RegisterTime != nil {
		return *x.RegisterTime
	}
	return 0
}

func (x *MUser) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *MUser) GetAgent() string {
	if x != nil && x.Agent != nil {
		return *x.Agent
	}
	return ""
}

func (x *MUser) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *MUser) GetRegisterIp() string {
	if x != nil && x.RegisterIp != nil {
		return *x.RegisterIp
	}
	return ""
}

func (x *MUser) GetFatherId() string {
	if x != nil && x.FatherId != nil {
		return *x.FatherId
	}
	return ""
}

type MUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SId                   string  `protobuf:"bytes,1,opt,name=s_id,json=sId,proto3" json:"s_id,omitempty"`
	LoginTime             *int64  `protobuf:"varint,2,opt,name=login_time,json=loginTime,proto3,oneof" json:"login_time,omitempty"`
	OfflineTime           *int64  `protobuf:"varint,3,opt,name=offline_time,json=offlineTime,proto3,oneof" json:"offline_time,omitempty"`
	Gold                  *int64  `protobuf:"varint,4,opt,name=gold,proto3,oneof" json:"gold,omitempty"`
	Diamonds              *int64  `protobuf:"varint,5,opt,name=diamonds,proto3,oneof" json:"diamonds,omitempty"`
	State                 *int64  `protobuf:"varint,6,opt,name=state,proto3,oneof" json:"state,omitempty"`
	LoginIp               *string `protobuf:"bytes,7,opt,name=login_ip,json=loginIp,proto3,oneof" json:"login_ip,omitempty"`
	LoginSFlag            *string `protobuf:"bytes,8,opt,name=login_s_flag,json=loginSFlag,proto3,oneof" json:"login_s_flag,omitempty"`
	CtrlStatus            *int64  `protobuf:"varint,9,opt,name=ctrl_status,json=ctrlStatus,proto3,oneof" json:"ctrl_status,omitempty"`
	GameId                *int64  `protobuf:"varint,10,opt,name=game_id,json=gameId,proto3,oneof" json:"game_id,omitempty"`
	RoomId                *int64  `protobuf:"varint,11,opt,name=room_id,json=roomId,proto3,oneof" json:"room_id,omitempty"`
	DeskId                *int64  `protobuf:"varint,12,opt,name=desk_id,json=deskId,proto3,oneof" json:"desk_id,omitempty"`
	CtrlValue             *int64  `protobuf:"varint,13,opt,name=ctrl_value,json=ctrlValue,proto3,oneof" json:"ctrl_value,omitempty"`
	PStock                *int64  `protobuf:"varint,14,opt,name=p_stock,json=pStock,proto3,oneof" json:"p_stock,omitempty"`
	RecentPlayTime        *int64  `protobuf:"varint,15,opt,name=recent_play_time,json=recentPlayTime,proto3,oneof" json:"recent_play_time,omitempty"`
	TotalRecharge         *int64  `protobuf:"varint,16,opt,name=total_recharge,json=totalRecharge,proto3,oneof" json:"total_recharge,omitempty"`
	TotalCash             *int64  `protobuf:"varint,17,opt,name=total_cash,json=totalCash,proto3,oneof" json:"total_cash,omitempty"`
	GmAward1              *int64  `protobuf:"varint,18,opt,name=gm_award1,json=gmAward1,proto3,oneof" json:"gm_award1,omitempty"`
	GmAward2              *int64  `protobuf:"varint,19,opt,name=gm_award2,json=gmAward2,proto3,oneof" json:"gm_award2,omitempty"`
	RecentPlayPerRoundSid *string `protobuf:"bytes,20,opt,name=recent_play_per_round_sid,json=recentPlayPerRoundSid,proto3,oneof" json:"recent_play_per_round_sid,omitempty"`
}

func (x *MUserInfo) Reset() {
	*x = MUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MUserInfo) ProtoMessage() {}

func (x *MUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MUserInfo.ProtoReflect.Descriptor instead.
func (*MUserInfo) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{8}
}

func (x *MUserInfo) GetSId() string {
	if x != nil {
		return x.SId
	}
	return ""
}

func (x *MUserInfo) GetLoginTime() int64 {
	if x != nil && x.LoginTime != nil {
		return *x.LoginTime
	}
	return 0
}

func (x *MUserInfo) GetOfflineTime() int64 {
	if x != nil && x.OfflineTime != nil {
		return *x.OfflineTime
	}
	return 0
}

func (x *MUserInfo) GetGold() int64 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *MUserInfo) GetDiamonds() int64 {
	if x != nil && x.Diamonds != nil {
		return *x.Diamonds
	}
	return 0
}

func (x *MUserInfo) GetState() int64 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *MUserInfo) GetLoginIp() string {
	if x != nil && x.LoginIp != nil {
		return *x.LoginIp
	}
	return ""
}

func (x *MUserInfo) GetLoginSFlag() string {
	if x != nil && x.LoginSFlag != nil {
		return *x.LoginSFlag
	}
	return ""
}

func (x *MUserInfo) GetCtrlStatus() int64 {
	if x != nil && x.CtrlStatus != nil {
		return *x.CtrlStatus
	}
	return 0
}

func (x *MUserInfo) GetGameId() int64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *MUserInfo) GetRoomId() int64 {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return 0
}

func (x *MUserInfo) GetDeskId() int64 {
	if x != nil && x.DeskId != nil {
		return *x.DeskId
	}
	return 0
}

func (x *MUserInfo) GetCtrlValue() int64 {
	if x != nil && x.CtrlValue != nil {
		return *x.CtrlValue
	}
	return 0
}

func (x *MUserInfo) GetPStock() int64 {
	if x != nil && x.PStock != nil {
		return *x.PStock
	}
	return 0
}

func (x *MUserInfo) GetRecentPlayTime() int64 {
	if x != nil && x.RecentPlayTime != nil {
		return *x.RecentPlayTime
	}
	return 0
}

func (x *MUserInfo) GetTotalRecharge() int64 {
	if x != nil && x.TotalRecharge != nil {
		return *x.TotalRecharge
	}
	return 0
}

func (x *MUserInfo) GetTotalCash() int64 {
	if x != nil && x.TotalCash != nil {
		return *x.TotalCash
	}
	return 0
}

func (x *MUserInfo) GetGmAward1() int64 {
	if x != nil && x.GmAward1 != nil {
		return *x.GmAward1
	}
	return 0
}

func (x *MUserInfo) GetGmAward2() int64 {
	if x != nil && x.GmAward2 != nil {
		return *x.GmAward2
	}
	return 0
}

func (x *MUserInfo) GetRecentPlayPerRoundSid() string {
	if x != nil && x.RecentPlayPerRoundSid != nil {
		return *x.RecentPlayPerRoundSid
	}
	return ""
}

type UserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *MUser     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	UserInfo *MUserInfo `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *UserInfoResponse) Reset() {
	*x = UserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResponse) ProtoMessage() {}

func (x *UserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResponse.ProtoReflect.Descriptor instead.
func (*UserInfoResponse) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{9}
}

func (x *UserInfoResponse) GetUser() *MUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserInfoResponse) GetUserInfo() *MUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type StorageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId uint32   `protobuf:"varint,1,opt,name=gameId,proto3" json:"gameId,omitempty"`
	Uids   []string `protobuf:"bytes,2,rep,name=uids,proto3" json:"uids,omitempty"`
}

func (x *StorageReq) Reset() {
	*x = StorageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageReq) ProtoMessage() {}

func (x *StorageReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageReq.ProtoReflect.Descriptor instead.
func (*StorageReq) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{10}
}

func (x *StorageReq) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *StorageReq) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

type StorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrentStock1 int64 `protobuf:"varint,2,opt,name=current_stock1,json=currentStock1,proto3" json:"current_stock1,omitempty"`
	CurrentStock2 int64 `protobuf:"varint,3,opt,name=current_stock2,json=currentStock2,proto3" json:"current_stock2,omitempty"`
	ChangeTime    int64 `protobuf:"varint,4,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	UpdateTime    int64 `protobuf:"varint,5,opt,name=Update_time,json=UpdateTime,proto3" json:"Update_time,omitempty"`
	GameId        int64 `protobuf:"varint,6,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *StorageInfo) Reset() {
	*x = StorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageInfo) ProtoMessage() {}

func (x *StorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageInfo.ProtoReflect.Descriptor instead.
func (*StorageInfo) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{11}
}

func (x *StorageInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StorageInfo) GetCurrentStock1() int64 {
	if x != nil {
		return x.CurrentStock1
	}
	return 0
}

func (x *StorageInfo) GetCurrentStock2() int64 {
	if x != nil {
		return x.CurrentStock2
	}
	return 0
}

func (x *StorageInfo) GetChangeTime() int64 {
	if x != nil {
		return x.ChangeTime
	}
	return 0
}

func (x *StorageInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *StorageInfo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type StorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Stock1              int64   `protobuf:"varint,3,opt,name=stock1,proto3" json:"stock1,omitempty"`
	Stock1WarnWater     int64   `protobuf:"varint,4,opt,name=stock1_warn_water,json=stock1WarnWater,proto3" json:"stock1_warn_water,omitempty"`
	DrawWater           int64   `protobuf:"varint,5,opt,name=draw_water,json=drawWater,proto3" json:"draw_water,omitempty"`
	PlayerServiceCharge float32 `protobuf:"fixed32,6,opt,name=player_service_charge,json=playerServiceCharge,proto3" json:"player_service_charge,omitempty"`
	SystemServiceCharge float32 `protobuf:"fixed32,7,opt,name=system_service_charge,json=systemServiceCharge,proto3" json:"system_service_charge,omitempty"`
	Stock2ServiceCharge float32 `protobuf:"fixed32,8,opt,name=stock2_service_charge,json=stock2ServiceCharge,proto3" json:"stock2_service_charge,omitempty"`
	Stock2WarnWater     int64   `protobuf:"varint,9,opt,name=stock2_warn_water,json=stock2WarnWater,proto3" json:"stock2_warn_water,omitempty"`
	Stock1State         int64   `protobuf:"varint,10,opt,name=stock1_state,json=stock1State,proto3" json:"stock1_state,omitempty"`
	UpdateTime          int64   `protobuf:"varint,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ToStock1            float32 `protobuf:"fixed32,12,opt,name=to_stock1,json=toStock1,proto3" json:"to_stock1,omitempty"`
	GameId              int64   `protobuf:"varint,13,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *StorageConfig) Reset() {
	*x = StorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfig) ProtoMessage() {}

func (x *StorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfig.ProtoReflect.Descriptor instead.
func (*StorageConfig) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{12}
}

func (x *StorageConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StorageConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageConfig) GetStock1() int64 {
	if x != nil {
		return x.Stock1
	}
	return 0
}

func (x *StorageConfig) GetStock1WarnWater() int64 {
	if x != nil {
		return x.Stock1WarnWater
	}
	return 0
}

func (x *StorageConfig) GetDrawWater() int64 {
	if x != nil {
		return x.DrawWater
	}
	return 0
}

func (x *StorageConfig) GetPlayerServiceCharge() float32 {
	if x != nil {
		return x.PlayerServiceCharge
	}
	return 0
}

func (x *StorageConfig) GetSystemServiceCharge() float32 {
	if x != nil {
		return x.SystemServiceCharge
	}
	return 0
}

func (x *StorageConfig) GetStock2ServiceCharge() float32 {
	if x != nil {
		return x.Stock2ServiceCharge
	}
	return 0
}

func (x *StorageConfig) GetStock2WarnWater() int64 {
	if x != nil {
		return x.Stock2WarnWater
	}
	return 0
}

func (x *StorageConfig) GetStock1State() int64 {
	if x != nil {
		return x.Stock1State
	}
	return 0
}

func (x *StorageConfig) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *StorageConfig) GetToStock1() float32 {
	if x != nil {
		return x.ToStock1
	}
	return 0
}

func (x *StorageConfig) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type StorageCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreInfo *StorageInfo           `protobuf:"bytes,1,opt,name=store_info,json=storeInfo,proto3" json:"store_info,omitempty"`
	StoreCfg  *StorageConfig         `protobuf:"bytes,2,opt,name=store_cfg,json=storeCfg,proto3" json:"store_cfg,omitempty"`
	UserCtrls []*StorageCtrlUserCtrl `protobuf:"bytes,3,rep,name=user_ctrls,json=userCtrls,proto3" json:"user_ctrls,omitempty"`
}

func (x *StorageCtrl) Reset() {
	*x = StorageCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageCtrl) ProtoMessage() {}

func (x *StorageCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageCtrl.ProtoReflect.Descriptor instead.
func (*StorageCtrl) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{13}
}

func (x *StorageCtrl) GetStoreInfo() *StorageInfo {
	if x != nil {
		return x.StoreInfo
	}
	return nil
}

func (x *StorageCtrl) GetStoreCfg() *StorageConfig {
	if x != nil {
		return x.StoreCfg
	}
	return nil
}

func (x *StorageCtrl) GetUserCtrls() []*StorageCtrlUserCtrl {
	if x != nil {
		return x.UserCtrls
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` //0-成功,其他-失败
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    //返回描述
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{14}
}

func (x *Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Response) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//一局游戏下注汇总
type BetSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId int32                `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"` //游戏id
	Bets   []*BetSummaryUserBet `protobuf:"bytes,2,rep,name=bets,proto3" json:"bets,omitempty"`
}

func (x *BetSummary) Reset() {
	*x = BetSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSummary) ProtoMessage() {}

func (x *BetSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSummary.ProtoReflect.Descriptor instead.
func (*BetSummary) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{15}
}

func (x *BetSummary) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *BetSummary) GetBets() []*BetSummaryUserBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

//一局游戏输赢汇总
type WinloseSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId  int32                        `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"` //游戏id
	Winlose []*WinloseSummaryUserWinlose `protobuf:"bytes,2,rep,name=winlose,proto3" json:"winlose,omitempty"`
}

func (x *WinloseSummary) Reset() {
	*x = WinloseSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinloseSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinloseSummary) ProtoMessage() {}

func (x *WinloseSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinloseSummary.ProtoReflect.Descriptor instead.
func (*WinloseSummary) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{16}
}

func (x *WinloseSummary) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *WinloseSummary) GetWinlose() []*WinloseSummaryUserWinlose {
	if x != nil {
		return x.Winlose
	}
	return nil
}

//玩家游戏信息保存, 用于断线重连
type UserGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SId    string `protobuf:"bytes,1,opt,name=s_id,json=sId,proto3" json:"s_id,omitempty"`           //玩家id
	GameId int32  `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"` //当前所在的游戏
	RoomId int64  `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` //当前所在的房间
	DeskId int64  `protobuf:"varint,4,opt,name=desk_id,json=deskId,proto3" json:"desk_id,omitempty"` //桌子id
}

func (x *UserGameInfo) Reset() {
	*x = UserGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameInfo) ProtoMessage() {}

func (x *UserGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameInfo.ProtoReflect.Descriptor instead.
func (*UserGameInfo) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{17}
}

func (x *UserGameInfo) GetSId() string {
	if x != nil {
		return x.SId
	}
	return ""
}

func (x *UserGameInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *UserGameInfo) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *UserGameInfo) GetDeskId() int64 {
	if x != nil {
		return x.DeskId
	}
	return 0
}

//游戏场次配置
type RoomConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //主键id，唯一
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                            //房间名称如高级体验场
	Score         int64  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                                         //准入条件 金币数
	GameId        int32  `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                         //游戏id
	MaxBet        int64  `protobuf:"varint,5,opt,name=max_bet,json=maxBet,proto3" json:"max_bet,omitempty"`                         //最大下注
	MinBet        int64  `protobuf:"varint,6,opt,name=min_bet,json=minBet,proto3" json:"min_bet,omitempty"`                         //最小下注
	MaxBetLucky   int64  `protobuf:"varint,7,opt,name=max_bet_lucky,json=maxBetLucky,proto3" json:"max_bet_lucky,omitempty"`        //幸运一击的最大值
	MinBetLucky   int64  `protobuf:"varint,8,opt,name=min_bet_lucky,json=minBetLucky,proto3" json:"min_bet_lucky,omitempty"`        //幸运一击的最小值
	Status        int32  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                       //状态
	Remark        string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`                                       //备注
	NewColumn     int32  `protobuf:"varint,11,opt,name=new_column,json=newColumn,proto3" json:"new_column,omitempty"`               //预留
	EnableRobot   int32  `protobuf:"varint,12,opt,name=enable_robot,json=enableRobot,proto3" json:"enable_robot,omitempty"`         //是否开放机器人
	EnableIpLimit int32  `protobuf:"varint,13,opt,name=enable_ip_limit,json=enableIpLimit,proto3" json:"enable_ip_limit,omitempty"` //是否开启IP限制匹配
	BetAreaLimit  string `protobuf:"bytes,14,opt,name=bet_area_limit,json=betAreaLimit,proto3" json:"bet_area_limit,omitempty"`     //下注区域限红配置
	MinScore      int64  `protobuf:"varint,15,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`                  //准入条件 最小准入金币数
	MaxScore      int64  `protobuf:"varint,16,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`                  //准入条件 最大准入金币数
}

func (x *RoomConfig) Reset() {
	*x = RoomConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomConfig) ProtoMessage() {}

func (x *RoomConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomConfig.ProtoReflect.Descriptor instead.
func (*RoomConfig) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{18}
}

func (x *RoomConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoomConfig) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RoomConfig) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RoomConfig) GetMaxBet() int64 {
	if x != nil {
		return x.MaxBet
	}
	return 0
}

func (x *RoomConfig) GetMinBet() int64 {
	if x != nil {
		return x.MinBet
	}
	return 0
}

func (x *RoomConfig) GetMaxBetLucky() int64 {
	if x != nil {
		return x.MaxBetLucky
	}
	return 0
}

func (x *RoomConfig) GetMinBetLucky() int64 {
	if x != nil {
		return x.MinBetLucky
	}
	return 0
}

func (x *RoomConfig) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RoomConfig) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RoomConfig) GetNewColumn() int32 {
	if x != nil {
		return x.NewColumn
	}
	return 0
}

func (x *RoomConfig) GetEnableRobot() int32 {
	if x != nil {
		return x.EnableRobot
	}
	return 0
}

func (x *RoomConfig) GetEnableIpLimit() int32 {
	if x != nil {
		return x.EnableIpLimit
	}
	return 0
}

func (x *RoomConfig) GetBetAreaLimit() string {
	if x != nil {
		return x.BetAreaLimit
	}
	return ""
}

func (x *RoomConfig) GetMinScore() int64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *RoomConfig) GetMaxScore() int64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

//游戏场次配置请求
type RoomConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId int32 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"` //当前所在的游戏
}

func (x *RoomConfigReq) Reset() {
	*x = RoomConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomConfigReq) ProtoMessage() {}

func (x *RoomConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomConfigReq.ProtoReflect.Descriptor instead.
func (*RoomConfigReq) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{19}
}

func (x *RoomConfigReq) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

//游戏场次配置回复
type RoomConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*RoomConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *RoomConfigResp) Reset() {
	*x = RoomConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomConfigResp) ProtoMessage() {}

func (x *RoomConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomConfigResp.ProtoReflect.Descriptor instead.
func (*RoomConfigResp) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{20}
}

func (x *RoomConfigResp) GetConfigs() []*RoomConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

//通知配置更新
type ConfigUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *ConfigUpdate) Reset() {
	*x = ConfigUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUpdate) ProtoMessage() {}

func (x *ConfigUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUpdate.ProtoReflect.Descriptor instead.
func (*ConfigUpdate) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{21}
}

func (x *ConfigUpdate) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type StorageCtrlUserCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SId        string `protobuf:"bytes,1,opt,name=s_id,json=sId,proto3" json:"s_id,omitempty"`
	CtrlStatus int32  `protobuf:"varint,2,opt,name=ctrl_status,json=ctrlStatus,proto3" json:"ctrl_status,omitempty"`
}

func (x *StorageCtrlUserCtrl) Reset() {
	*x = StorageCtrlUserCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageCtrlUserCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageCtrlUserCtrl) ProtoMessage() {}

func (x *StorageCtrlUserCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageCtrlUserCtrl.ProtoReflect.Descriptor instead.
func (*StorageCtrlUserCtrl) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{13, 0}
}

func (x *StorageCtrlUserCtrl) GetSId() string {
	if x != nil {
		return x.SId
	}
	return ""
}

func (x *StorageCtrlUserCtrl) GetCtrlStatus() int32 {
	if x != nil {
		return x.CtrlStatus
	}
	return 0
}

type BetSummaryUserBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SId string `protobuf:"bytes,1,opt,name=s_id,json=sId,proto3" json:"s_id,omitempty"` //玩家id
	Bet int64  `protobuf:"varint,2,opt,name=bet,proto3" json:"bet,omitempty"`           //下注
}

func (x *BetSummaryUserBet) Reset() {
	*x = BetSummaryUserBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSummaryUserBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSummaryUserBet) ProtoMessage() {}

func (x *BetSummaryUserBet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSummaryUserBet.ProtoReflect.Descriptor instead.
func (*BetSummaryUserBet) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BetSummaryUserBet) GetSId() string {
	if x != nil {
		return x.SId
	}
	return ""
}

func (x *BetSummaryUserBet) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

type WinloseSummaryUserWinlose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SId  string `protobuf:"bytes,1,opt,name=s_id,json=sId,proto3" json:"s_id,omitempty"` //玩家id
	Gold int64  `protobuf:"varint,2,opt,name=gold,proto3" json:"gold,omitempty"`         //输赢
	Tax  int64  `protobuf:"varint,3,opt,name=tax,proto3" json:"tax,omitempty"`           //税收
}

func (x *WinloseSummaryUserWinlose) Reset() {
	*x = WinloseSummaryUserWinlose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_center_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinloseSummaryUserWinlose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinloseSummaryUserWinlose) ProtoMessage() {}

func (x *WinloseSummaryUserWinlose) ProtoReflect() protoreflect.Message {
	mi := &file_pb_center_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinloseSummaryUserWinlose.ProtoReflect.Descriptor instead.
func (*WinloseSummaryUserWinlose) Descriptor() ([]byte, []int) {
	return file_pb_center_proto_rawDescGZIP(), []int{16, 0}
}

func (x *WinloseSummaryUserWinlose) GetSId() string {
	if x != nil {
		return x.SId
	}
	return ""
}

func (x *WinloseSummaryUserWinlose) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *WinloseSummaryUserWinlose) GetTax() int64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

var File_pb_center_proto protoreflect.FileDescriptor

var file_pb_center_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x62, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x48, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x71, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x65, 0x65, 0x22, 0x20,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0x21, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x22,
	0x9a, 0x02, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0d, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x22, 0xa4, 0x01, 0x0a,
	0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x22, 0xaa, 0x05, 0x0a, 0x06, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x11,
	0x0a, 0x04, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x65,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x63, 0x63, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x08, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x65, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x22, 0xea, 0x07, 0x0a, 0x0b, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x11, 0x0a, 0x04, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x04, 0x67, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x74, 0x72, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x07, 0x52, 0x0a, 0x63, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x08, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x64, 0x65, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a,
	0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x74, 0x72, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0b, 0x52, 0x09, 0x63, 0x74, 0x72, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0c, 0x52, 0x06, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x67, 0x6d, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x10, 0x52, 0x08, 0x67, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x31, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x67, 0x6d, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x11, 0x52, 0x08, 0x67, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6d, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6d, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x32, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x22, 0x5c, 0x0a,
	0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x31, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x22, 0xd9, 0x03, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x31, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x31, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x31, 0x57, 0x61, 0x72, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x64, 0x72, 0x61, 0x77, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x32, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x32, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x32,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x32, 0x57, 0x61, 0x72, 0x6e, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x31, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x31,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x12, 0x2c, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x66, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x74, 0x72, 0x6c,
	0x73, 0x1a, 0x3f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x12, 0x11,
	0x0a, 0x04, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x52, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x1a, 0x2f, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x12, 0x11, 0x0a, 0x04, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x62, 0x65, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0f,
	0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x69, 0x6e, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73,
	0x65, 0x1a, 0x47, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x11, 0x0a, 0x04, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x78, 0x22, 0x6e, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x0a, 0x04,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xd4, 0x03, 0x0a, 0x0b, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x6c, 0x75, 0x63, 0x6b, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x4c, 0x75,
	0x63, 0x6b, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x42,
	0x65, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x2a, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x0a,
	0x10, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x2e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xd1, 0x05, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x73, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x3b, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x62,
	0x12, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x1a, 0x09, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x2e, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x09, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0c, 0x2e, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x1a, 0x09, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10,
	0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x09, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x42, 0x2d, 0x5a,
	0x2b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6a, 0x69, 0x75, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_center_proto_rawDescOnce sync.Once
	file_pb_center_proto_rawDescData = file_pb_center_proto_rawDesc
)

func file_pb_center_proto_rawDescGZIP() []byte {
	file_pb_center_proto_rawDescOnce.Do(func() {
		file_pb_center_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_center_proto_rawDescData)
	})
	return file_pb_center_proto_rawDescData
}

var file_pb_center_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_pb_center_proto_goTypes = []interface{}{
	(*GameSettlementTos)(nil),         // 0: game_settlement_tos
	(*ProbabilityRewardToc)(nil),      // 1: probability_reward_toc
	(*UserRequest)(nil),               // 2: user_request
	(*UsersRequest)(nil),              // 3: users_request
	(*SupposeReduceReq)(nil),          // 4: suppose_reduce_req
	(*ChangeBalanceReq)(nil),          // 5: change_balance_req
	(*ChangeBalanceResp)(nil),         // 6: change_balance_resp
	(*MUser)(nil),                     // 7: m_user
	(*MUserInfo)(nil),                 // 8: m_user_info
	(*UserInfoResponse)(nil),          // 9: user_info_response
	(*StorageReq)(nil),                // 10: storage_req
	(*StorageInfo)(nil),               // 11: storage_info
	(*StorageConfig)(nil),             // 12: storage_config
	(*StorageCtrl)(nil),               // 13: storage_ctrl
	(*Response)(nil),                  // 14: response
	(*BetSummary)(nil),                // 15: bet_summary
	(*WinloseSummary)(nil),            // 16: winlose_summary
	(*UserGameInfo)(nil),              // 17: user_game_info
	(*RoomConfig)(nil),                // 18: room_config
	(*RoomConfigReq)(nil),             // 19: room_config_req
	(*RoomConfigResp)(nil),            // 20: room_config_resp
	(*ConfigUpdate)(nil),              // 21: config_update
	(*StorageCtrlUserCtrl)(nil),       // 22: storage_ctrl.user_ctrl
	(*BetSummaryUserBet)(nil),         // 23: bet_summary.user_bet
	(*WinloseSummaryUserWinlose)(nil), // 24: winlose_summary.user_winlose
}
var file_pb_center_proto_depIdxs = []int32{
	7,  // 0: user_info_response.user:type_name -> m_user
	8,  // 1: user_info_response.user_info:type_name -> m_user_info
	11, // 2: storage_ctrl.store_info:type_name -> storage_info
	12, // 3: storage_ctrl.store_cfg:type_name -> storage_config
	22, // 4: storage_ctrl.user_ctrls:type_name -> storage_ctrl.user_ctrl
	23, // 5: bet_summary.bets:type_name -> bet_summary.user_bet
	24, // 6: winlose_summary.winlose:type_name -> winlose_summary.user_winlose
	18, // 7: room_config_resp.configs:type_name -> room_config
	0,  // 8: storage.send_settlement:input_type -> game_settlement_tos
	2,  // 9: storage.get_user_info_from_db:input_type -> user_request
	2,  // 10: storage.get_user_info:input_type -> user_request
	10, // 11: storage.get_storage_info:input_type -> storage_req
	4,  // 12: storage.suppose_reduce:input_type -> suppose_reduce_req
	16, // 13: storage.user_winlose_summary:input_type -> winlose_summary
	15, // 14: storage.user_bet_summary:input_type -> bet_summary
	2,  // 15: storage.get_user_game_info:input_type -> user_request
	17, // 16: storage.set_user_game_info:input_type -> user_game_info
	19, // 17: storage.get_game_room_config:input_type -> room_config_req
	21, // 18: storage.notify_config_update:input_type -> config_update
	5,  // 19: storage.reduce_balance:input_type -> change_balance_req
	5,  // 20: storage.add_balance:input_type -> change_balance_req
	1,  // 21: storage.send_settlement:output_type -> probability_reward_toc
	9,  // 22: storage.get_user_info_from_db:output_type -> user_info_response
	9,  // 23: storage.get_user_info:output_type -> user_info_response
	13, // 24: storage.get_storage_info:output_type -> storage_ctrl
	14, // 25: storage.suppose_reduce:output_type -> response
	14, // 26: storage.user_winlose_summary:output_type -> response
	14, // 27: storage.user_bet_summary:output_type -> response
	17, // 28: storage.get_user_game_info:output_type -> user_game_info
	14, // 29: storage.set_user_game_info:output_type -> response
	20, // 30: storage.get_game_room_config:output_type -> room_config_resp
	14, // 31: storage.notify_config_update:output_type -> response
	6,  // 32: storage.reduce_balance:output_type -> change_balance_resp
	6,  // 33: storage.add_balance:output_type -> change_balance_resp
	21, // [21:34] is the sub-list for method output_type
	8,  // [8:21] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_pb_center_proto_init() }
func file_pb_center_proto_init() {
	if File_pb_center_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_center_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSettlementTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbabilityRewardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupposeReduceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinloseSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageCtrlUserCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSummaryUserBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_center_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinloseSummaryUserWinlose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_center_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_pb_center_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_pb_center_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_pb_center_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_pb_center_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_center_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_center_proto_goTypes,
		DependencyIndexes: file_pb_center_proto_depIdxs,
		MessageInfos:      file_pb_center_proto_msgTypes,
	}.Build()
	File_pb_center_proto = out.File
	file_pb_center_proto_rawDesc = nil
	file_pb_center_proto_goTypes = nil
	file_pb_center_proto_depIdxs = nil
}
